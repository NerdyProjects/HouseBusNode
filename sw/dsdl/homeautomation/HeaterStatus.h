/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/matthias/Projekte/heizungssteuerung/dsdl/homeautomation/20008.HeaterStatus.uavcan
 */

#ifndef __HOMEAUTOMATION_HEATERSTATUS
#define __HOMEAUTOMATION_HEATERSTATUS

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
int15 temperature_outside
int15 temperature_burner
int15 temperature_flow
int15 temperature_flow_target
bool circulation
bool burner
bool burner_actually_firing
******************************************************************************/

/********************* DSDL signature source definition ***********************
homeautomation.HeaterStatus
saturated int15 temperature_outside
saturated int15 temperature_burner
saturated int15 temperature_flow
saturated int15 temperature_flow_target
saturated bool circulation
saturated bool burner
saturated bool burner_actually_firing
******************************************************************************/

#define HOMEAUTOMATION_HEATERSTATUS_ID                     20008
#define HOMEAUTOMATION_HEATERSTATUS_NAME                   "homeautomation.HeaterStatus"
#define HOMEAUTOMATION_HEATERSTATUS_SIGNATURE              (0x62CD3C11CAB620CAULL)

#define HOMEAUTOMATION_HEATERSTATUS_MAX_SIZE               ((63 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    int16_t    temperature_outside;           // bit len 15
    int16_t    temperature_burner;            // bit len 15
    int16_t    temperature_flow;              // bit len 15
    int16_t    temperature_flow_target;       // bit len 15
    bool       circulation;                   // bit len 1
    bool       burner;                        // bit len 1
    bool       burner_actually_firing;        // bit len 1

} homeautomation_HeaterStatus;

extern
uint32_t homeautomation_HeaterStatus_encode(homeautomation_HeaterStatus* source, void* msg_buf);

extern
int32_t homeautomation_HeaterStatus_decode(const CanardRxTransfer* transfer, uint16_t payload_len, homeautomation_HeaterStatus* dest, uint8_t** dyn_arr_buf);

extern
uint32_t homeautomation_HeaterStatus_encode_internal(homeautomation_HeaterStatus* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t homeautomation_HeaterStatus_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, homeautomation_HeaterStatus* dest, uint8_t** dyn_arr_buf, int32_t offset, uint8_t tao);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __HOMEAUTOMATION_HEATERSTATUS